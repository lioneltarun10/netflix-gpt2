npx create-react-app netflix-gpt2
npm start or npm run start
Let's setup our project.
Tailwindcss

npm install -D tailwindcss
npx tailwindcss init

(see tailwindcss website on how to setup tailwindcss for create-react-app )

After this we will discuss what features to build

# Features
- Login/Sign up
  - Sign In/ Sign Up form
  - redirect to browse page
- Browse page (after authentication)
 - Header
 - Main Movie
   - Trailer in background
   - Title & Description
   - Movie Suggestions
    - MovieLists * N
 - NetflixGPT 
  - Search Bar
  - Movie suggestions 

  Then let's create some basic components for our project like Browse, header , Body , Login , etc.

  Now let's setup routing
  npm i -D react-router-dom

  We have setup our routing
  Now let's create a login form 
  Login is done , let's create sign up
  But do we need new form for sign up or can we convert smae form to sign up form?

  We can convert same form to sign up form.

  Now our form needs validations. Whenever we need  a big form for our application, we can use FORMIK library. It is very good to build form inside react applications ,and easy to handle validations.

  Now we will not use FORMIK , we will write validations on our own.

  We will be using useRef hook for validations.

  We will create a seperate utility called validate.js to validate our form data. So that the login.js is kept simple.

  Now we created checkValidData function in validate.js , we can use it in our handleButtonClick function in Login.js.
  But how will we get email and password typed in the input box? one way is to use state variables for email and passowrd , so when user types something , it constantly updates the state variables. 
  Other way is to use useRef hook which references the email inpu box and password input box. Reference is created by react using useRef hook.

  vALIDATIONS writing is done , now we will do authentication of our app.

  We will use google firebase for authentication and also we will host our app in firebase itself.

  Steps for deployment

  1)Install forebase CLI - 'npm install -g firebase-tools'
2) firebase login - 'firebase login'
3) initialize firebase - 'firebase init' , then select hosting
(before 4th step , do 'npm run build' to build our project for production deployment)
4) Deploy command - 'firebase deploy'


Reading authentication is the super power of a developer.

We will read documentation and setup our user signup .

Latest of firebase is to use "web modular api" , don't use "web namespaced api"

We can see in firebase authentication docs , that the line
const auth = getAuth()

is used everywhere , that's why we will keep this line at a central place , instead of writing this line twice for signIn and signUp.

We have written code for signIn / SignUp.
Now once the user is signed In or signed Up , we will store our user details in redux store and also navigate to browse page.

Install redux
npm i -D @reduxjs/toolkit
npm i react-redux

We have created our redux store , now we will provide the store at root of our application which is app.js.

Now we can dispatch an action to store our user whenever we login or remove user when we logout. But this way we are dispatching action many times, instead of that we can use the utility function(API) given by firebase in manage users section which is 
"onAuthStateChanged" API. This API is like a eventlistener for change of status of user lgin status , when that event happens ,it will call a callback function, So we can use that callback function to perform whatever redux operations we want to perform.

This API will perform actions whenever there's a change in user state (login status).
We will use this API at body component , and also we need to run this API only once(we will add this eventlistener kind of API only once) , so we will use useEffect hook.

That means , we have use this API once when we launch the website , this API is set such that whenever there's change in user login status it will call the callback function that we have given.

Now we will dispatch our actions using the useDispatch hook , we will dispatch that actions inside our API call.

REMEMBER ALSO USE HOOKS ON TOP OF THE COMPONENT , REST OTHER THINGS WILL COME AFTERWARDS.

Also remember , we need to navigate when the user logs In/Sign Up. we will do that in the API call itself.

We can use useNavigate hook for navigating.
But when we write the code for navigate in useEffect of our body component, we faced a problem , which says that navigate cannot be used out of router provider. That is we are using router provider in body component , children of body can do navigation , but useEffect is run before the main rendering is done , and so we cannot do navigation outside of body(in which router provider is given).

 const dispatch = useDispatch()
  const navigate = useNavigate();

  const appRouter = createBrowserRouter([
    {
      path:'/',
      element:<Login />
    },
    {
      path:'/browse',
      element: <Browse />
    }
  ])

  useEffect(() => {
    onAuthStateChanged(auth, (user) => {
      if (user) {
        // User is signed in, see docs for a list of available properties
        // https://firebase.google.com/docs/reference/js/auth.user
        const {uid,email,displayName}  = user;
        dispatch(addUser({uid:uid,email:email,displayName:displayName}));
        navigate('/browse')
      } else {
        // User is signed out
        // ...
        dispatch(removeUser())
        navigate('/')
      }
    })
  },[])
  
  return (
      <div>
       <RouterProvider router={appRouter}></RouterProvider>
      </div>
    )
  }

  One solution is to move our router provider from body level to app.js level , but to do this we have to change the structure of our code again.

  Another solution is we can just navigate in login.js.

  We have successfully done navigation and also storing user details in store when loggedIn/SignedUP.

  Now let's build sign out feature.

  We have taken profile icon from netflix.

  Now we can use sign out API from firebase.

  We have built the signout feature.

  Now one thing left is displayName of user provided by firebase. we are not storing the user name when he sign's up to the displayname property of user.
  We can look into firebase manage users section , and find the "update a user's profile" API.


  FIXING A BUG!!

  When a new user is registered , we are navigated to browse page , bu the user profile and user display name is not updated in store , because as soon as user is Signed Up , there's a change in auth status , because of which the "onAuthChange" API call happens , and only uid and email is updated , as we still did not call the updateProfile API yet in Login.js

  To solve this , we can dispatch an action again in  updateProfile API call.

  That's it we are done with user authentication.

  Now let's build the browse page.

  We will be using TMDB API for movies list.