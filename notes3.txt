We will create a GPT button in header, on clicking it , we will go to GptSearch Component ,
and we will add our fuctionality there.

we will render our GptSearch component in browse component , but we will show our GptSearch component only
if we click on GPT button in header.
Basically we have to introduce a kind of toggle functionality.

We can do that by either storing toggle variable as state variables by using
useState hook or as we are already using redux store , we can use redux store to store our button toggle.

we have userslice and movieslice , now we are dealing with gpr search , so let's create new slice.
It's not mandatory to create new slices , we can keep everything in one slice itself , but it's always
good to keep logical seperation in code.

We will introduce the toggle functionality at browse component.
We have added toggle functionality , now let's build gptSearch component.

we have added netflix background image to GptSearch component , which is already used in login.
This is one of the reasons why we need to keep all constants ,strings , URL's in seperate constants file.

In GptSearchBar component , we added a form with input box and a button , and made them appear in center of page.

Adding multi language to our webpage.
There are websites where we can select language of our choice , then we can see everything in that language , how can we make that?

Let's make Hindi and English languages in search bar of gpt search.

How do we do that?
Basically every text that is present on website should come from some constants file , and according to the language we choose , that 
particular language constants should display in place of text.

Each and every text in website should be constant in some constants file. They should
not be hardcoded.

We are giving select box in header for user to select language , and the code for language in header in 
dynamic , not hardcoded. We are giving languages array in constants.js file and we have mapped over that array.

First of all , we need to store the selected language in redux store , we will store in new Slice called app config , 
which has config like language , dark/light theme , user Preferences ,etc.

We have create configSlice for storing app configuration.

We can see that we are storing whole data layer in redux store , and we are syncing that data layer with
the UI layer.


Tip: Never push console.log into production code.

We have used the stored language from redux store to display that language context in GptSearchBar component.

We will also show the language select only in gptsearch component , not in browse or login component.

That's it we made our app multi-lingual.

Nowe let's continue with building gpt search.

When we type something in input box , and click search button , the openai API will
give us results.

Let's first take API from platform.openai.com .

We created new secret API key , and remember this key should be gidden from others ,
because this key is free only for 3 months , after that thwy will start a billing cycle and we have to pay to use the API's 
of openai . SO if someone get's hold of our key they might use our key and trigger billing on our account.

Next we need to install a package 
npm install openai

We create a seperate utils file for openai , in which we will do setup of openai.

Now we will use this openai.

Remember to preventDefault the form behaviour , because when we are clicking button in gptsearchbar , it's refreshing the page.

We will add onClick handler function to button , so that the text in input box is used by openai to make an API call
to GPT API to get movie results.

We will use useRef hook to get text inside input box.

Now let's take the sample code for making API call to openai chat application from
the "npm openai" website , then use it.

We will get an error on browser saying
"It looks like you're running in a browser-like environment"

because we are calling API from client side , not from server side.
It has risk of exposing our secret API key.

If we really want to call API , it's best to call from node.js (from server side).
But if we want to allow this , it gives us solution in error itself , to use a flag.
new OpenAI({ apiKey, dangerouslyAllowBrowser: true });

Now we can make the call from browser's.

Ideally we should do all this things from Backend.

Now , we have given our search text to API call also.
But to get more refined and exact results , we need to give the API some text like 
what we are expecting as results.

So in 'content' key of the object that we are passing to API , we need to provide some text such that , we want results like that.

const gptQuery = 'Act as a Movie Recommendation system and suggest some movies for the query : '
    + searchText.current.value + 
    " only give me names of 5 movies, comma seperated like the example result given ahead. Example Result: Gadar, Sholay , Don , Golmaal ,Koi Mil Gaya"


We need to give this so that gpt can understand what we want as results , because otherwise it cannot understand what results we want and give us some random things.

Now we can see that we can type what kind of movies we want and the API will give us suggestions like recommendation system.

NOTE!!!!!!
I had to pay 5$ , because the API is not free anymore , so use very less and efficiently.

Now , we got suggestions from the API , we need to search in TMDB  a API which can give those movies.

We have search API for movies in TMDB , we will use that.

First of all , the gpt API will give us 5 movies result in s string ,
we will use split method to get an array of 5 movies.

Then we apply map method on the array of movies and pass all movies to searchMovieTMDB function call which is an async function.
because the API call inside it is asynchronous.

But JS will wait for none.

The map function will make the 5 API calls immediately.

searchMovieTMDB returns a promise not the result( if not understood watch promises and async/await videos)

We will get an array of promises from the map method.

Prmoise will take some time to give result ,will not happen immediately.

This is a very important concept. Please keep this concept in mind.

Now how do we get data out of this promise array.

There is a function known as Promise.all() which will take an array of promises 
and we will await for the promise.all() to finish , and it will finish only if all promises inside the array of promises are resolved.

After all promises are resolved , we got results and we can see
that the results gave lot of movies , not just 5.

Basically TMDB search movie API gave movies which has the name given by gpt api as part of the full movie name.
And also it gave movies in different language.

we can do two things , either we can match the movie name exactly and show only it or otherwise we can show all of them.

How will I show this movies?
Let's take the movies and push that inside of store ,then take from store and display it.

We will push inside GPT slice itself , not creating new slice.

we created new reducer in gpt slice and new key in state of gpt slice.
Finally we have dispatched the action to store results form tmdb to the gpt slice.

Actually we want to store search results also , that is , the movies recommened by gpt api.
But we are not creating a new reducer for dispatching action to store the search results , we will pass data to same reducer which is used for
storing tmdb results ,and store the search results in state. Let's see how it's done.

We have stored both movieNames from gpt api and movieResults from tmdb api .

We can extract the logic written in gptSearchBar component to custom hook's to make the code more clean and modular.Do it yourself.
We can also show Shimmer UI when we click on search in gpt search bar component, do it yourself.

Now let's see how to show them.

We want show the movies in similar fashion to our browse page , where we have a title and movies under that title.
In this case , title becomes our movie name given by gpt api , and movie list under taht title is the results given by tmdb for that movie name.

Also observe!!! movieList component takes title and movies as props , we can se the same component.
See the reusability!!!

Finally , We have rendered our movie name and corresponding movie list in our gptMovieSuggestions component.

A Big learning for us is the reusability of the component!!!
The movieList component is modular so we can use it wherever we want , and also the code is not breaking.
All movie cards , the scrollbar , everything is working fine.

If we click on homepage and come back to gpt search component back , we can see that the results are still there,
it is because our results are stored in redux store. And when we click on homepage , our gptSearch component is out of our dom tree , and only when we
click on gptSearch button , our gptSearch component comes into our dom tree and mainContainer , secondaryContainer is out od our DOM tree.

But suppose we want the gptSearch page to be empty when we click on gptSearch button , just dispatch an action and clear the gptSlice , that's it simple!

Our project is almost complete , but let's just improve the CSS , make it responsive to all devices.
Another thing is we need to hide the API key , how do we hide the files in which we have important info , which we don't want others to 
have access to.

OPENAI_KEY is kept in constants file , it's not good way to keep the key.
There are multiple ways to handle it , but the besy way to handle it in production is to create a .env file.

What ever secret info we have , we have to kept it in .env file.

We have to add REACT_APP_ prefix to our variable name like this REACT_APP_OPENAI_KEY.
Now in constants file , instead of using our secret info directly , we will use 

process.env.variable_name 

Then we add this .env file to our gitignore.

This process.env and .env file is not related to react , it is something related to basic security in production.

This .env it not pushed to git by including in gitignore , but we need to set the environment variables in our server computer with our secret info variable names , so that 
the server we access our secret info from the server's environment variables using process.env .
This way hacker will not know the secret info from our app , as it is not present in app , but in our environment in server.

Now let's make our app responsive. 

What is memoization?
Everytime we visit a page in which API calls are there , it makes API call. That means everytime API calls are made.

Everytime my component loads , the custom hook is called and API call is made.
But we know that the data is already present in redux store.

We can use the concept of memoization to stop this.
memoization is a big word , but it's simple.

If data already has nowPlayingMovies , we don't fetch it , this is called memoization.
It would save us a lot of API calls. Suppose 1 lakh users on website , imagine the number of API calls would be saved by adding memoization.

Now , regarding OPENAI key , we don't want the users to use our apoenai key , but their own key , so we can ask the users for their openai key.

Now lets make our netflisGpt responsive.

First let's fix the GPT SEARCH page first.
Let's fix header in GPTSEARCH page.
Now let's fix gptsearchBar and then fix the search results.

We are done with gptSearch page , let's fix the browse page now.

We have fixed the browse page for mobile phones.

Now lets move to last page which is login page.
